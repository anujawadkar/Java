Enter password: **********
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.5.62 MySQL Community Server (GPL)

Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> CREATE DATABASE WORKERS;
ERROR 1007 (HY000): Can't create database 'workers'; database exists
mysql> USE WORKERS;
Database changed
mysql>
mysql> CREATE TABLE Worker (
    -> WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    -> FIRST_NAME VARCHAR(25),
    -> LAST_NAME VARCHAR(25),
    -> SALARY INT(15),
    -> JOINING_DATE DATETIME,
    -> DEPARTMENT VARCHAR(25)
    -> );
ERROR 1050 (42S01): Table 'worker' already exists
mysql>
mysql> INSERT INTO Worker (WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT)
    -> VALUES  (101, 'Anuja', 'Wadkar', 200000, '14-02-20 09.00.00', 'HR'),
    -> (102, 'Priya', 'sharma', 80000, '14-06-11 09.00.00', 'Admin'),
    -> (103, 'Tejas', 'Kute', 300000, '14-02-20 09.00.00', 'HR'),
    -> (104, 'Anjali', 'Singh', 600000, '14-02-20 09.00.00', 'Admin'),
    -> (105, 'Shubham', 'Pawar', 500000, '14-06-11 09.00.00', 'Admin'),
    -> (106, 'Yogita', 'Diu', 200000, '14-06-11 09.00.00', 'Account'),
    -> (107, 'jaya', 'Dambarke', 750000, '14-01-20 09.00.00', 'Account'),
    -> (108, 'Shivani', 'Shejwal', 200000, '14-04-11 09.00.00', 'Admin');
ERROR 1062 (23000): Duplicate entry '101' for key 'PRIMARY'
mysql>
mysql> SELECT * FROM WORKER;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|       101 | Anuja      | Wadkar    | 200000 | 2014-02-20 09:00:00 | HR         |
|       102 | Priya      | sharma    |  80000 | 2014-06-11 09:00:00 | Admin      |
|       103 | Tejas      | Kute      | 300000 | 2014-02-20 09:00:00 | HR         |
|       104 | Anjali     | Singh     | 600000 | 2014-02-20 09:00:00 | Admin      |
|       105 | Shubham    | Pawar     | 500000 | 2014-06-11 09:00:00 | Admin      |
|       106 | Yogita     | Diu       | 200000 | 2014-06-11 09:00:00 | Account    |
|       107 | jaya       | Dambarke  | 750000 | 2014-01-20 09:00:00 | Account    |
|       108 | Shivani    | Shejwal   | 200000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
8 rows in set (0.00 sec)

mysql>
mysql> -- SQL QUESTIONS
mysql>
mysql> -- 1) WRITE A QUERY TO FETCH THE FIRST_NAME FROM WORKER TABLE USING ALIAS NAME AS WORKER_NAME.
mysql>
mysql> SELECT FIRST_NAME AS WORKER_NAME FROM WORKER ;
+-------------+
| WORKER_NAME |
+-------------+
| Anuja       |
| Priya       |
| Tejas       |
| Anjali      |
| Shubham     |
| Yogita      |
| jaya        |
| Shivani     |
+-------------+
8 rows in set (0.00 sec)

mysql>
mysql>
mysql> -- 2) WRITE A QUERY TO FETCH UNIQUE VALUES OF DEPARTMENT FROM THE WORKER TABLE.
mysql>
mysql> SELECT DISTINCT(DEPARTMENT) FROM WORKER;
+------------+
| DEPARTMENT |
+------------+
| HR         |
| Admin      |
| Account    |
+------------+
3 rows in set (0.00 sec)

mysql>
mysql>
mysql> -- 3) WRITE A QUERY TO SHOW THE LAST 5 RECORDS FROM THE WORKER TABLE.
mysql>
mysql> SELECT * FROM WORKER
    -> ORDER BY WORKER_ID DESC
    -> LIMIT 5;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|       108 | Shivani    | Shejwal   | 200000 | 2014-04-11 09:00:00 | Admin      |
|       107 | jaya       | Dambarke  | 750000 | 2014-01-20 09:00:00 | Account    |
|       106 | Yogita     | Diu       | 200000 | 2014-06-11 09:00:00 | Account    |
|       105 | Shubham    | Pawar     | 500000 | 2014-06-11 09:00:00 | Admin      |
|       104 | Anjali     | Singh     | 600000 | 2014-02-20 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
5 rows in set (0.00 sec)

mysql>
mysql> -- 4) WRITE A QUERY TO PRINT THE FIRST THREE CHARACTERS OF FIRST_NAME FROM WORKER TABLE.
mysql>
mysql> SELECT left(FIRST_NAME,3) AS FIRST_NAME_3_CHAR
    -> FROM WORKER;
+-------------------+
| FIRST_NAME_3_CHAR |
+-------------------+
| Anu               |
| Pri               |
| Tej               |
| Anj               |
| Shu               |
| Yog               |
| jay               |
| Shi               |
+-------------------+
8 rows in set (0.00 sec)

mysql>
mysql> -- 5) WRITE AN SQL QUERY TO FIND THE POSITION OF THE ALPHABET 'a' IN THE FIRST_NAME COLUMN 'Anuja' FROM WORKER TABLE.
mysql>
mysql> SELECT LOCATE("a" , "Anuja",2);
+-------------------------+
| LOCATE("a" , "Anuja",2) |
+-------------------------+
|                       5 |
+-------------------------+
1 row in set (0.00 sec)

mysql>

OVER (PARTITION BY DEPARTMENT ORDER BY SALAR' at line 1
mysql>
mysql> -- 7) WRITE A SQL QUERY TO PRINT THE FIRST NAME FROM THE WORKERS TABLE AFTER REMOVING WHITE SPACES FROM THE RIGHT SIDE.
mysql>
mysql> SELECT RTRIM(FIRST_NAME) AS TRIMMED_FIRST_NAMES
    -> FROM WORKER;
+---------------------+
| TRIMMED_FIRST_NAMES |
+---------------------+
| Anuja               |
| Priya               |
| Tejas               |
| Anjali              |
| Shubham             |
| Yogita              |
| jaya                |
| Shivani             |
+---------------------+
8 rows in set (0.00 sec)

mysql>
mysql> -- 8) WRITE AN SQL QUERY THAT FETCHES THE UNIQUE VALUES OF DEPARTMENT FROM WORKER TABLE AND PRINTS ITS LENGTH.
mysql>
mysql> SELECT DISTINCT(DEPARTMENT) AS UNIQUE_DEPARTMENTS, LENGTH(DEPARTMENT) AS LENGTH_OF_DEPT_NAMES
    -> FROM WORKER;
+--------------------+----------------------+
| UNIQUE_DEPARTMENTS | LENGTH_OF_DEPT_NAMES |
+--------------------+----------------------+
| HR                 |                    2 |
| Admin              |                    5 |
| Account            |                    7 |
+--------------------+----------------------+
3 rows in set (0.00 sec)

mysql>
mysql>
mysql> -- 9) WRITE AN SQL QUERY TO FETCH nth MAX SALARIES FROM A TABLE.
mysql>
mysql> WITH RANKED_SALARY AS
    -> (SELECT *, DENSE_RANK()
    -> OVER (ORDER BY SALARY DESC) RANKING_AS_PER_SALARY
    -> FROM WORKER)
    -> SELECT *
    -> FROM RANKED_SALARY
    -> WHERE RANKING_AS_PER_SALARY=n;

OVER (ORDER BY SALARY DESC) RANKING_AS_' at line 1
mysql> -- n is the nth highest salary that you need.
mysql>
mysql> -- 10) WRITE AN SQL QUERY TO PRINT THE FIRST_NAME COLUMN FROM THE WORKER TABLE AFTER REPLACING 'a' WITH 'A'.
mysql>
mysql> SELECT REPLACE(FIRST_NAME,'a','A') AS REPLACED_NAME
    -> FROM WORKER;
+---------------+
| REPLACED_NAME |
+---------------+
| AnujA         |
| PriyA         |
| TejAs         |
| AnjAli        |
| ShubhAm       |
| YogitA        |
| jAyA          |
| ShivAni       |
+---------------+
8 rows in set (0.00 sec)

mysql>
mysql> -- 11) WRITE AN SQL QUERY TO PRINT ALL WORKER DETAILS FROM THE WORKER TABLE ORDER BY FIRST_NAME ASCENDING AND DEPARTMENT DESCENDING.
mysql>
mysql> SELECT *
    -> FROM WORKER
    -> ORDER BY FIRST_NAME ASC, DEPARTMENT DESC;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|       104 | Anjali     | Singh     | 600000 | 2014-02-20 09:00:00 | Admin      |
|       101 | Anuja      | Wadkar    | 200000 | 2014-02-20 09:00:00 | HR         |
|       107 | jaya       | Dambarke  | 750000 | 2014-01-20 09:00:00 | Account    |
|       102 | Priya      | sharma    |  80000 | 2014-06-11 09:00:00 | Admin      |
|       108 | Shivani    | Shejwal   | 200000 | 2014-04-11 09:00:00 | Admin      |
|       105 | Shubham    | Pawar     | 500000 | 2014-06-11 09:00:00 | Admin      |
|       103 | Tejas      | Kute      | 300000 | 2014-02-20 09:00:00 | HR         |
|       106 | Yogita     | Diu       | 200000 | 2014-06-11 09:00:00 | Account    |
+-----------+------------+-----------+--------+---------------------+------------+
8 rows in set (0.00 sec)

mysql>
mysql> -- 12) WRITE AN SQL QUERY TO FETCH THE NAMES OF THE WORKERS WHO EARN THE HIGHEST SALARY.
mysql>
mysql> SELECT FIRST_NAME, LAST_NAME, SALARY
    -> FROM WORKER
    -> WHERE SALARY = (SELECT SALARY FROM WORKER ORDER BY SALARY DESC LIMIT 1);
+------------+-----------+--------+
| FIRST_NAME | LAST_NAME | SALARY |
+------------+-----------+--------+
| jaya       | Dambarke  | 750000 |
+------------+-----------+--------+
1 row in set (0.01 sec)

mysql>
mysql> -- 13) WRITE AN SQL QUERY TO PRINT DETAILS OF WORKERS EXCLUDING FIRST_NAME'S 'Yogita' AND 'Jaya' FROM WORKER TABLE.
mysql>
mysql> SELECT *
    -> FROM WORKER
    -> WHERE FIRST_NAME NOT IN ('Yogita', 'Jaya');
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|       101 | Anuja      | Wadkar    | 200000 | 2014-02-20 09:00:00 | HR         |
|       102 | Priya      | sharma    |  80000 | 2014-06-11 09:00:00 | Admin      |
|       103 | Tejas      | Kute      | 300000 | 2014-02-20 09:00:00 | HR         |
|       104 | Anjali     | Singh     | 600000 | 2014-02-20 09:00:00 | Admin      |
|       105 | Shubham    | Pawar     | 500000 | 2014-06-11 09:00:00 | Admin      |
|       108 | Shivani    | Shejwal   | 200000 | 2014-04-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
6 rows in set (0.00 sec)

mysql>
mysql> -- 14) WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE FIRST_NAME ENDS WITH 'h' AND CONTAINS SIX ALPHABETS.
mysql>
mysql> SELECT *
    -> FROM WORKER
    -> WHERE RIGHT(FIRST_NAME,1) = 'h' AND LENGTH(FIRST_NAME)=6;
Empty set (0.00 sec)

mysql>
mysql> -- 15) WRITE A QUERY TO VALIDATE EMAIL OF EMPLOYEE.
mysql> -- VALIDATE MEANS CHECKING WHETHER THE EMAIL ENTERED IS OF THE REQUIRED FORMAT LIKE 'ABC@GMAIL.COM'.
mysql> -- LET US ASSUME A FIELD 'EMP_EMAIL' WITH EMAIL ID'S OF THE EMPLOYEES
mysql>
mysql> SELECT *
    -> FROM WORKER
    -> WHERE EMP_EMAIL LIKE '%@gmail.com';
ERROR 1054 (42S22): Unknown column 'EMP_EMAIL' in 'where clause'
mysql>
mysql> -- 16) WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHO HAVE JOINED IN FEB 2014.
mysql>
mysql> SELECT * FROM WORKER
    -> WHERE JOINING_DATE LIKE '2014-02-%';
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|       101 | Anuja      | Wadkar    | 200000 | 2014-02-20 09:00:00 | HR         |
|       103 | Tejas      | Kute      | 300000 | 2014-02-20 09:00:00 | HR         |
|       104 | Anjali     | Singh     | 600000 | 2014-02-20 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
3 rows in set, 1 warning (0.00 sec)

mysql>
mysql> -- 17) WRITE AN SQL QUERY TO FETCH DUPLICATE RECORDS HAVING MATCHING DATA IN SOME FIELDS OF A TABLE.
mysql>
mysql> -- LET US ASSUME THAT WE WANT TO CHECK FOR DUPLICATE RECORDS WHICH HAVE MATCHING DATA IN THE SALARY AND DEPARTMENT FIELDS TOGETHER.
mysql> SELECT SALARY, DEPARTMENT ,COUNT(*)
    -> FROM WORKER
    -> GROUP BY  SALARY, DEPARTMENT
    -> HAVING COUNT(*)>1;
Empty set (0.00 sec)

mysql>
mysql> -- 18) HOW TO REMOVE DUPLICATE ROWS FROM TABLE?
mysql>
mysql> WITH DUPLICATE_RECORDS AS
    -> (SELECT *, ROW_NUMBER()
    -> OVER (PARTITION BY SALARY, DEPARTMENT) COUNT_NO
    -> FROM WORKER )
    -> DELETE FROM DUPLICATE_RECORDS
    -> WHERE COUNT_NO>1;

OVER (PARTITION BY SALARY, DEPARTM' at line 1
mysql> -- IN 'MySQL', CTE(COMMON TABLE EXPRESSIONS) IS CREATED AS A READ ONLY FILE, HENCE NO UPDATE OR DELETE IS POSSIBLE.
mysql> -- BUT THE SAME IS POSSIBLE IN 'MS SQL SERVER'. TO COUNTER THIS IN MySQL pROVIDES YOU WITH THE DELETE JOIN STATEMENT
mysql> -- THT ALLOWS YOU TO REMOVE DUPLICATE ROWS QUICKLY.
mysql>
mysql> SET SQL_SAFE_UPDATES = 0; -- TO REMOVE THE SAFE UDATE MODE OTHERWISE MySQL DOES NOT ALLOW ANY UPDATE/DELETE.
Query OK, 0 rows affected (0.00 sec)

mysql>
mysql> DELETE W1 FROM WORKER W1
    -> INNER JOIN WORKER W2
    -> WHERE W1.WORKER_ID < W2.WORKER_ID
    -> AND W1.SALARY= W2.SALARY
    -> AND W1.DEPARTMENT=W2.DEPARTMENT;
Query OK, 0 rows affected (0.00 sec)

mysql>
mysql> SELECT *, COUNT(*)
    -> FROM WORKER
    -> GROUP BY SALARY, DEPARTMENT
    -> HAVING COUNT(*)>1; -- SHOWS THAT THERE ARE NO DUPLICATE RECORDS IN SALARY AND DEPARTMENT.
Empty set (0.00 sec)

mysql>
mysql>
mysql> -- 19) WRITE AN SQL QUERY TO SHOW ONLY ODD ROWS FROM A TABLE.
mysql>
mysql> WITH INDEXED_TABLE AS
    -> (SELECT * , ROW_NUMBER()
    -> OVER (ORDER BY WORKER_ID) ROW_NO
    -> FROM WORKER)
    -> SELECT * FROM INDEXED_TABLE
    -> WHERE MOD(ROW_NO,2);

OVER (ORDER BY WORKER_ID) ROW_NO
FROM ' at line 1
mysql>
mysql> -- 20) WRITE AN SQL QUERY TO CLONE A NEW TABLE FROM ANOTHER TABLE.
mysql>
mysql> -- i) SIMPLE CLONING - COPIES THE ENTIRE TABLE STRUCTURE WITH THE DATA
mysql>
mysql> CREATE TABLE WORKER_NEW SELECT * FROM WORKER;
ERROR 1050 (42S01): Table 'WORKER_NEW' already exists
mysql>
mysql> -- ii) SHALLOW CLONING -- SHOWS ONLY THE TABLE STRUCTURE. NO DATA IS COPIED.
mysql>
mysql> CREATE TABLE WORKER_NEW LIKE WORKER;
ERROR 1050 (42S01): Table 'worker_new' already exists
mysql>
mysql> -- iii) DEEP CLONING
mysql>
mysql> CREATE TABLE WORKER_NEW LIKE WORKER;

mysql> INSERT INTO WORKER_NEW SELECT * FROM WORKER;
Query OK, 8 rows affected (0.03 sec)
Records: 8  Duplicates: 0  Warnings: 0

mysql>
mysql> -- 21) WRITE AN SQL QUERY TO FETCH INTERSECTING RECORDS OF TWO TABLES
mysql>
mysql> -- LET'S CREATE TWO TABLES
mysql> CREATE TABLE LIST1
    -> (
    -> ID INT,
    -> NAME VARCHAR(100)
    -> );

mysql>
mysql> INSERT INTO LIST1
    -> VALUES
    ->  (1,"Vinayak"),
    ->  (2,"Suraj");
Query OK, 2 rows affected (0.01 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql>
mysql> CREATE TABLE LIST2 LIKE LIST1;
ERROR 1050 (42S01): Table 'list2' already exists
mysql>
mysql> INSERT INTO LIST2
    -> VALUES
    -> (2,"Suraj"),
    -> (3,"Ved");
Query OK, 2 rows affected (0.02 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql>
mysql> SELECT * FROM LIST1;
+------+---------+
| ID   | NAME    |
+------+---------+
|    1 | Vinayak |
|    2 | Suraj   |
|    1 | Vinayak |
|    2 | Suraj   |
+------+---------+
4 rows in set (0.00 sec)

mysql> SELECT * FROM LIST2;
+------+-------+
| ID   | NAME  |
+------+-------+
|    2 | Suraj |
|    3 | Ved   |
|    2 | Suraj |
|    3 | Ved   |
+------+-------+
4 rows in set (0.00 sec)

mysql> -- MySQL DOES NOT SUPPORT INTERSECT.
mysql>
mysql> -- 22) WRITE AN SQL QUERY TO SHOW RECORDS FROM ONE TABLE THAT ANOTHER TABLE DOES NOT HAVE.
mysql>
mysql> SELECT * FROM LIST
    -> MINUS
    -> SELECT * FROM LIST2;

mysql>
mysql> -- 23) WRITE AN SQL QUERY TO SHOW THE TOP N (SAY 10) RECORDS OF THE TABLE.
mysql>
mysql> SELECT *
    -> FROM WORKER
    -> ORDER BY SALARY DESC
    -> LIMIT 10;
+-----------+------------+-----------+--------+---------------------+------------+
| WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE        | DEPARTMENT |
+-----------+------------+-----------+--------+---------------------+------------+
|       107 | jaya       | Dambarke  | 750000 | 2014-01-20 09:00:00 | Account    |
|       104 | Anjali     | Singh     | 600000 | 2014-02-20 09:00:00 | Admin      |
|       105 | Shubham    | Pawar     | 500000 | 2014-06-11 09:00:00 | Admin      |
|       103 | Tejas      | Kute      | 300000 | 2014-02-20 09:00:00 | HR         |
|       101 | Anuja      | Wadkar    | 200000 | 2014-02-20 09:00:00 | HR         |
|       106 | Yogita     | Diu       | 200000 | 2014-06-11 09:00:00 | Account    |
|       108 | Shivani    | Shejwal   | 200000 | 2014-04-11 09:00:00 | Admin      |
|       102 | Priya      | sharma    |  80000 | 2014-06-11 09:00:00 | Admin      |
+-----------+------------+-----------+--------+---------------------+------------+
8 rows in set (0.00 sec)

mysql>
mysql> -- 24) WRITE AN SQL QUERY TO DETERMINE THE NTH(SAY N=5) HIGHEST SALARY FROM A TABLE.
mysql>
mysql> SELECT SALARY
    -> FROM WORKER
    -> ORDER BY SALARY DESC
    -> LIMIT 4,1;  -- 4=N-1
+--------+
| SALARY |
+--------+
| 200000 |
+--------+
1 row in set (0.00 sec)

mysql>
mysql> -- 25) WRITE AN SQL QUERY TO DETERMINE THE 5TH(SAY N=5) WITHOUT USING TOP OR LIMIT METHOD.
mysql>
mysql> WITH SALARY_RANKING AS
    -> (SELECT SALARY, DENSE_RANK()
    -> OVER (ORDER BY SALARY DESC) RANKING
    -> FROM WORKER )
    -> SELECT SALARY
    -> FROM SALARY_RANKING
    -> WHERE RANKING=5;

OVER (ORDER BY SALARY DESC) RANKI' at line 1
mysql>
mysql> -- 26) WRITE AN SQL QUERY TO FETCH THE LIST OF EMPLOYEES WITH THE SAME SALARY
mysql>
mysql> INSERT INTO WORKER
    -> VALUES (104, 'Anjali', 'Singh', 600000, '14-02-20 09.00.00', 'Admin'); -- ADDING A RECORD WITH SAME SALARY.
ERROR 1062 (23000): Duplicate entry '104' for key 'PRIMARY'
mysql>
mysql> SELECT W1.FIRST_NAME, W1.LAST_NAME
    -> FROM WORKER W1 JOIN WORKER W2
    -> WHERE W1.SALARY= W2.SALARY
    -> AND W1.WORKER_ID != W2.WORKER_ID;
+------------+-----------+
| FIRST_NAME | LAST_NAME |
+------------+-----------+
| Yogita     | Diu       |
| Shivani    | Shejwal   |
| Anuja      | Wadkar    |
| Shivani    | Shejwal   |
| Anuja      | Wadkar    |
| Yogita     | Diu       |
+------------+-----------+
6 rows in set (0.00 sec)
